name: Deploy to FTP

# D√©clencher le workflow
on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Permet de d√©clencher manuellement

jobs:
  deploy:
    name: Deploy to FTP Server
    runs-on: ubuntu-latest

    steps:
    # Checkout du code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Validation des secrets FTP requis
    - name: Validate FTP secrets
      run: |
        if [ -z "${{ secrets.FTP_HOST }}" ]; then
          echo "‚ùå Erreur: Le secret FTP_HOST n'est pas configur√©"
          echo "üìù Configurez FTP_HOST dans Settings ‚Üí Secrets and variables ‚Üí Actions"
          exit 1
        fi
        if [ -z "${{ secrets.FTP_USER }}" ]; then
          echo "‚ùå Erreur: Le secret FTP_USER n'est pas configur√©"
          exit 1
        fi
        if [ -z "${{ secrets.FTP_PASSWORD }}" ]; then
          echo "‚ùå Erreur: Le secret FTP_PASSWORD n'est pas configur√©"
          exit 1
        fi
        echo "‚úÖ Tous les secrets FTP requis sont configur√©s"

    # Configuration Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    # Installation des d√©pendances
    - name: Install dependencies
      run: npm ci

    # Build de production
    - name: Build for production
      run: npm run generate:production
      env:
        NUXT_APP_BASE_URL: /txtengage/

    # V√©rification du build
    - name: Verify build output
      run: |
        if [ ! -d "./.output/public" ]; then
          echo "‚ùå Erreur: Le dossier de build ./.output/public n'existe pas"
          echo "üìÅ Contenu du dossier .output:"
          ls -la ./.output/ || echo "Le dossier .output n'existe pas"
          exit 1
        fi
        echo "‚úÖ Build v√©rifi√© - dossier .output/public trouv√©"
        echo "üìÅ Contenu √† d√©ployer:"
        ls -la ./.output/public/

    # D√©ploiement FTP avec action sp√©cialis√©e
    - name: Deploy to FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_HOST }}
        username: ${{ secrets.FTP_USER }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: ${{ secrets.FTP_PORT || 21 }}
        protocol: ${{ secrets.FTP_SECURE == 'true' && 'ftps' || 'ftp' }}
        local-dir: ./.output/public/
        server-dir: ${{ secrets.FTP_REMOTE_PATH || '/public_html/txtengage/' }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.DS_Store
          **/*.map
        log-level: verbose

    # Alternative: D√©ploiement FTP avec script custom
    - name: Deploy with custom FTP script
      if: false  # D√©sactiv√© par d√©faut, activez si n√©cessaire
      run: npm run deploy:ftp
      env:
        FTP_HOST: ${{ secrets.FTP_HOST }}
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        FTP_PORT: ${{ secrets.FTP_PORT }}
        FTP_SECURE: ${{ secrets.FTP_SECURE }}
        FTP_REMOTE_PATH: ${{ secrets.FTP_REMOTE_PATH }}

    # Notification de succ√®s
    - name: Notify success
      if: success()
      run: |
        echo "üöÄ D√©ploiement r√©ussi vers le dossier txtengage!"
        echo "üåê Site accessible √†: ${{ secrets.FTP_HOST }}${{ secrets.FTP_REMOTE_PATH || '/txtengage/' }}"

    # Notification d'√©chec avec aide
    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå √âchec du d√©ploiement. V√©rifiez les logs."
        echo ""
        echo "üîß Pour r√©soudre:"
        echo "1. V√©rifiez que tous les secrets FTP sont configur√©s dans GitHub"
        echo "2. Testez vos identifiants FTP manuellement"
        echo "3. V√©rifiez que le chemin distant existe sur le serveur"
        echo "4. Consultez les logs d√©taill√©s ci-dessus" 