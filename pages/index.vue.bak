<script setup>
import { onMounted, ref, computed, reactive, nextTick, onBeforeUnmount } from 'vue';
import { useSlidesStore } from '~/stores/slides';
import { useRuntimeConfig } from '#app';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { ScrollToPlugin } from 'gsap/ScrollToPlugin';

gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

const config = useRuntimeConfig();

const showButton = ref(false);
const slidesStore = useSlidesStore();
const loading = computed(() => slidesStore.loading);
const sortedSlides = computed(() => slidesStore.sortedSlides);
const activeSlideIndex = ref(0); 
const activeSlideId = ref(null); 

const defaultBackground = ref('url(/images/bg12.webp)');
const specialBackground = ref('url(/images/nono.webp)');
const currentBackground = ref(defaultBackground.value);
const isMobile = ref(false);

const scrollMagicController = ref(null);
let mastertl = null;

const preloadImage = (src) => {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.src = src;
    img.onload = () => resolve(img);
    img.onerror = reject;
  });
};

const updateBackground = () => {
  nextTick(() => {
    const wrapper = document.getElementById('vodacomwrapper');
    if (wrapper) {
      const currentSlideId = activeSlideId.value;
      if (currentSlideId === 20 || currentSlideId === 114) {
        wrapper.style.backgroundImage = specialBackground.value;
      } else {
        wrapper.style.backgroundImage = defaultBackground.value;
      }
      wrapper.style.backgroundSize = 'cover';
      wrapper.style.backgroundPosition = 'center center';
      wrapper.style.backgroundRepeat = 'no-repeat';
    }
  });
};

const activeAccordionIndex = ref(null); 
const activeAccordionImage = ref(null); 

const toggleAccordion = (slideId, index) => {
    const currentSlide = slidesStore.sortedSlides.find(s => s.id === slideId);
    if (!currentSlide) return;
    activeAccordionIndex.value = activeAccordionIndex.value === index ? null : index;
    const imgSrc = currentSlide.paragraphs?.[index]?.match(/src="([^"]*)"/)?.[1];
    activeAccordionImage.value = imgSrc;
};

const formData = ref({ firstName: '', lastName: '', email: '', company: '', phone: '' });
const formLoading = ref(false); 
const showAlert = ref(false);
const alertType = ref('');
const alertMessage = ref('');

const submitForm = async () => {
    formLoading.value = true;
    try {
        const response = await fetch('https://public.herotofu.com/v1/f69a2860-b0b2-11ef-b6f4-4774a3a77de8', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', Accept: 'application/json' },
            body: JSON.stringify({
                name: `${formData.value.firstName} ${formData.value.lastName}`,
                email: formData.value.email,
                company: formData.value.company,
                phone: formData.value.phone,
            }),
        });
        if (response.ok) {
            alertType.value = 'alert-success';
            alertMessage.value = 'Message envoyé avec succès !';
            formData.value = { firstName: '', lastName: '', email: '', company: '', phone: '' };
        } else {
            throw new Error('Form submission failed');
        }
    } catch (error) {
        alertType.value = 'alert-danger';
        alertMessage.value = 'Une erreur est survenue. Veuillez réessayer.';
    } finally {
        showAlert.value = true;
        formLoading.value = false;
        setTimeout(() => { showAlert.value = false; }, 5000);
    }
};

const slideAnimationsPlayed = reactive({});
let sectionScrollTriggers = []; 

const setupSectionScrolling = () => {
  const sections = gsap.utils.toArray('.slide-section');
  sections.forEach((section, index) => {
    const slideId = parseInt(section.dataset.slideId);
    const trigger = ScrollTrigger.create({
      trigger: section,
      start: 'top center+=10%', 
      end: 'bottom center-=10%', 
      onEnter: () => {
        console.log(`Entering section: ${section.id}, index: ${index}, slideId: ${slideId}`);
        activeSlideIndex.value = index;
        activeSlideId.value = slideId;
        updateBackground();
        if (slideId === 73) {
          initSlide73AnimationGSAP(section);
        }
      },
      onEnterBack: () => {
        console.log(`Entering back section: ${section.id}, index: ${index}, slideId: ${slideId}`);
        activeSlideIndex.value = index;
        activeSlideId.value = slideId;
        updateBackground();
        if (slideId === 73) {
          initSlide73AnimationGSAP(section); 
        }
      },
      onLeave: () => {
        console.log(`Leaving section: ${section.id}`);
        if (slideId === 73) {
          destroySlide73AnimationGSAP(section);
        }
      },
      onLeaveBack: () => {
        console.log(`Leaving back section: ${section.id}`);
        if (slideId === 73) {
          destroySlide73AnimationGSAP(section);
        }
      }
    });
    sectionScrollTriggers.push(trigger);
  });

  if (sections.length > 0) {
    activeSlideIndex.value = 0;
    activeSlideId.value = parseInt(sections[0].dataset.slideId);
    updateBackground();
    if (activeSlideId.value === 73) {
        initSlide73AnimationGSAP(sections[0]);
    }
    // TODO: Animer la première slide si nécessaire
  }
};

const scrollToSection = (target) => {
  let targetElement;
  if (typeof target === 'number') { 
    const sections = gsap.utils.toArray('.slide-section');
    targetElement = sections[target];
  } else if (typeof target === 'string') { 
    targetElement = document.querySelector(target.startsWith('#') ? target : `#${target}`);
  } else { 
    targetElement = target;
  }

  if (targetElement) {
    gsap.to(window, {
      scrollTo: { y: targetElement, autoKill: false },
      duration: 1,
      ease: 'power2.inOut'
    });
  }
};

const handleResize = () => {
    isMobile.value = window.innerWidth < 768; 
    ScrollTrigger.refresh(); 
};

onMounted(async () => {
  await slidesStore.fetchSlides(); 

  isMobile.value = window.innerWidth < 768; 
  window.addEventListener('resize', handleResize);

  try {
    await Promise.all([
      preloadImage('/images/nono.webp'),
      preloadImage('/images/bg12.webp')
    ]);
  } catch (error) { /* Ignorer les erreurs de préchargement */ }

  // slidesStore.startAutoRefresh(); 
  
  activeAccordionIndex.value = 0;
  const firstAccordionSlide = sortedSlides.value.find(s => s.id === 23);
  if (firstAccordionSlide?.paragraphs?.[0]) {
    activeAccordionImage.value = firstAccordionSlide.paragraphs[0].match(/src="([^"]*)"/)?.[1];
  }

  caseStudyActiveIndex.value = 0;

  nextTick(() => {
      if (sortedSlides.value.length > 0) {
        setupSectionScrolling(); 
      } else {
        console.warn('Slides not loaded yet, GSAP setup will be delayed or might fail.');
      }
  });

  setTimeout(() => showButton.value = true, 2000);
});

onBeforeUnmount(() => {
  sectionScrollTriggers.forEach(trigger => trigger.kill());
  sectionScrollTriggers = [];

  gsap.killTweensOf(window);
  
  window.removeEventListener('resize', handleResize);
  
  const slide73Section = document.getElementById('section-slide-73');
  if (slide73Section) {
      destroySlide73AnimationGSAP(slide73Section);
  }
  
  if (scrollMagicController.value) {
    scrollMagicController.value.destroy(true);
    scrollMagicController.value = null;
  }
});

const isMenuOpen = ref(false);
const toggleMenu = () => { isMenuOpen.value = !isMenuOpen.value; };

const goToSlide = (index) => {
  scrollToSection(index);
  isMenuOpen.value = false;
};

useHead({ title: 'TXT Engage - Vodafone' });

const extractTitle = (html) => {
  const match = html.match(/<h3>(.*?)<\/h3>/);
  return match ? match[1] : '';
};
const extractTextContent = (html) => {
  let content = html.replace(/<h3>.*?<\/h3>/, '');
  content = content.replace(/<img.*?\/?>/g, '');
  return content;
};
const extractImage = (html) => {
  const match = html.match(/src="([^"]*?)"/);
  return match ? match[1] : '';
};

const caseStudyActiveIndex = ref(0);
const toggleCaseStudySection = (index) => { caseStudyActiveIndex.value = index; };

</script>

<template>
  <div id="vodacomwrapper">
    <div v-if="loading" class="loader-container">
      <nuxt-img src="/images/logovector.svg" class="logo-loader" alt="Logo" />
    </div>
    
    <div v-if="!loading && slidesStore.error" class="error-container">
      <div class="error-message">
        <p>{{ slidesStore.error }}</p>
        <button @click="slidesStore.fetchSlides()" class="retry-button">Réessayer</button>
      </div>
    </div>

    <header class="fixed-top">
      <div id="headerpadding" class="p-4 flex-row justify-content-between align-items-center">
        <img src="/images/logovector.svg" alt="Logo" />
        <div class="menu-container">
          <button class="hamburger" @click="toggleMenu" :class="{ 'is-active': isMenuOpen }">
            <span></span>
            <span></span>
            <span></span>
          </button>
          <nav id="menu" class="slide-menu" :class="{ 'is-open': isMenuOpen }">
            <ul>
              <li v-for="(slide, index) in sortedSlides" :key="slide.id"
                :class="{ active: activeSlideIndex === index }" @click="goToSlide(index)">
                <span class="slide-label">{{ slide.menuTitle }}</span>
              </li>
            </ul>
          </nav>
        </div>
      </div>
    </header>

    <div id="master-scroll-container" class="slides"> 
      <section v-for="(slide, index) in sortedSlides" :key="slide.id" 
        class="slide-section"
        :id="`section-slide-${slide.id}`"
        :data-slide-id="slide.id" 
        :style="{
          height: '100vh', 
          width: '100%', 
          overflow: 'hidden', 
          display: 'flex', 
          flexDirection: 'column', 
          justifyContent: 'center', 
          alignItems: 'center', 
          position: 'relative' 
        }">
        
        <div class="slides-container"
          :style="{
            width: '100%', 
            height: '100%', 
            display: 'flex', 
            justifyContent: 'center', 
            alignItems: 'center',
            backgroundImage: isMobile.value ? (slide.backgroundMobile ? `url(${slide.backgroundMobile})` : 'none') : (slide.thumbnail ? `url(${slide.thumbnail})` : 'none'),
            backgroundSize: 'cover',
            backgroundPosition: 'center center'
          }">
          
          <div v-if="slide.id === 73" class="txtintro row m-0 p-0 slide" ref="slide73" id="slide-73">
            <div class="firstContainer">
              <div class="slapjh">
                <div class="subint" id="subint">
                  <h2 class="text-element slide-73-title" v-html="slide.title"></h2>
                  <p class="text-element slide-73-content" v-html="slide.wp_content"></p>
                </div>
                <div class="points-fort" id="points-fort">
                  <div v-for="(paragraph, idx) in slide.paragraphs" :key="idx"
                    class="text-element slide-73-point" :class="`point-${idx}`" v-html="paragraph">
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div v-else-if="slide.id === 21" id="thoiathoing" class="p-0 m-0 slide">
            <div class="cont p-2">
              <div class="row">
                <h3 id="mshill" class="slide-21-title" v-html="slide.wp_content"></h3>
              </div>
              <div class="row flex-row">
                <div v-for="(paragraph, idx) in slide.paragraphs" :key="idx"
                  class="text-element slide-21-point col m-0 p-2" :class="`point-21-${idx}`" v-html="paragraph">
                </div>
              </div>
            </div>
          </div>
          
          <div v-else-if="slide.id === 20" id="kiff" class="p-0 m-0 bgblur slide">
            <div id="usruu">
              <div id="mzu" class="nusrru">
                <h2 id="slide2a" class="text-element" v-html="slide.wp_title"></h2>
                <h2 id="slide2b" class="text-element" v-html="slide.title"></h2>
                <div id="slide2c" class="apitch" v-html="slide.content"></div>
              </div>
              <div id="guysamuel" class="gee">
                <div v-for="(paragraph, idx) in slide.paragraphs" :key="idx" class="text-element"
                  v-html="paragraph">
                </div>
              </div>
            </div>
          </div>
          
          <div v-else-if="slide.id === 114" id="kiffyu" class="p-0 m-0 bgblur slide">
            <div id="tchoffo">
              <div id="deffp" class="preme">
                <div v-for="(paragraph, idx) in slide.paragraphs" :key="idx" class="text-element"
                  v-html="paragraph">
                </div>
              </div>
            </div>
          </div>
          
          <div v-else-if="slide.id === 22" id="thoiathoing" class="p-0 m-0 slide">
            <div class="cont p-2">
              <div class="row">
                <h3 id="mshill" v-html="slide.wp_content"></h3>
              </div>
              <div class="row flex-row align-content-center align-items-center juustify-content-center">
                <div v-for="(paragraph, idx) in slide.paragraphs" :key="idx"
                  class="text-element col m-0 p-2" v-html="paragraph">
                </div>
              </div>
            </div>
          </div>
          
          <div v-else-if="slide.id === 23" id="bygone-bip" class="p-0 m-0 slide">
            <div class="container">
              <div id="perdrix" class="row">
                <div class="perdrix-slider">
                  <div class="perdrix-slider-container">
                    <div class="perdrix-slider-navigation">
                      <button class="perdrix-nav-prev"><i class="fas fa-chevron-left"></i></button>
                      <button class="perdrix-nav-next"><i class="fas fa-chevron-right"></i></button>
                    </div>
                    
                    <div class="perdrix-slides-wrapper">
                      <div v-for="(paragraph, idx) in slide.paragraphs" :key="idx" 
                        class="perdrix-slide" :class="{ 'active': idx === activeAccordionIndex }">
                        <div class="split-container">
                          <div class="text-container">
                            <h3 v-if="extractTitle(paragraph)">{{ extractTitle(paragraph) }}</h3>
                            <div class="text-content" v-html="extractTextContent(paragraph)"></div>
                          </div>
                          <div class="image-container">
                            <img v-if="extractImage(paragraph)" :src="extractImage(paragraph)" 
                              alt="Feature illustration" class="feature-image" />
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div class="perdrix-pagination">
                      <span v-for="(paragraph, idx) in slide.paragraphs" :key="idx"
                        class="perdrix-bullet" :class="{ 'active': idx === activeAccordionIndex }"
                        @click="activeAccordionIndex = idx"></span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div id="slide-59" v-else-if="slide.id === 59" class="slide">
            <div id="killerjunior" class="ouh">
              <div class="row">
                <div class="col-md-5 leporc">
                  <h2 class="text-element aya" v-html="slide.title"></h2>
                  <p v-html="slide.wp_content"></p>
                </div>
                <div class="col-md-7 kankan">
                  <div v-for="(paragraph, idx) in slide.paragraphs" :key="idx" class="lemouds"
                    v-html="paragraph">
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div id="slide-128" v-else-if="slide.id === 128" class="slide">
            <div id="killerwu" class="ouh">
              <div class="case-study-container">
                <div class="row">
                  <div class="col-md-7">
                    <div id="casestudy">
                      <div id="dec">  
                        <h2 class="text-element aya" v-html="slide.title"></h2>
                        <div v-for="(paragraph, idx) in slide.paragraphs" :key="idx"
                          class="text-element col m-0 p-2" 
                          :class="{'case-study-active': idx === caseStudyActiveIndex, 'case-study-item': true}">
                          <h3 @click="toggleCaseStudySection(idx)" class="case-study-header">
                            {{ extractTitle(paragraph) }}
                            <span class="case-study-indicator">{{ idx === caseStudyActiveIndex ? '−' : '+' }}</span>
                          </h3>
                          <div class="case-study-content" :class="{'case-study-content-visible': idx === caseStudyActiveIndex}">
                            <div v-html="extractTextContent(paragraph)"></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-5">
                    <div class="case-study-image">
                      <img v-if="slide.thumbnail" :src="slide.thumbnail" alt="Case Study Image" class="img-fluid">
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div id="lemof" v-else-if="slide.id === 60" class="slide">
            <div id="lafill" class="container">
              <h2 class="text-element lopere" v-html="slide.title"></h2>
              <div v-for="(paragraph, idx) in slide.paragraphs" :key="idx"
                class="text-element ditocard" v-html="paragraph">
              </div>
              <div class="form-container">
                <div v-if="showAlert" :class="['alert', alertType]" role="alert">
                  {{ alertMessage }}
                </div>
                <form @submit.prevent="submitForm" class="contact-form">
                  <div class="row">
                    <div class="col-md-6">
                      <input v-model="formData.firstName" type="text" class="form-control"
                        placeholder="First Name" required>
                    </div>
                    <div class="col-md-6 col-sm-12">
                      <input v-model="formData.lastName" type="text" class="form-control"
                        placeholder="Last Name" required>
                    </div>
                  </div>

                  <div class="row">
                    <div class="col-md-12">
                      <input v-model="formData.company" type="text" class="form-control"
                        placeholder="Company Name" required>
                    </div>
                  </div>

                  <div class="row">
                    <div class="col-md-12">
                      <input v-model="formData.phone" type="tel" class="form-control"
                        placeholder="Contact Number" required>
                    </div>
                  </div>

                  <div class="row submit-row">
                    <div class="col-md-">
                      <button type="submit" class="btn btn-primary" :disabled="formLoading">
                        {{ formLoading ? 'Sending...' : 'Submit' }}
                      </button>
                    </div>
                  </div>
                </form>
              </div>

              <div id="yenamarre" class="d-flex align-items-center justify-content-center m-4">
                <a @click="goToFirstSlide" class="back-to-top" :class="{ 'show': showButton }">
                  <img src="/images/backToTop.svg" alt="Back to Top" />
                </a>
              </div>
            </div>
          </div>

          <div v-else class="default-slide-content p-5 slide">
            <h1 class="text-element" v-html="slide.title"></h1>
            <div class="text-element" v-html="slide.content || slide.wp_content"></div>
            <div v-for="(paragraph, pIdx) in slide.paragraphs" :key="pIdx" class="text-element" v-html="paragraph"></div>
          </div>

        </div> 
      </section> 
    </div> 
  </div> 
</template>

<style lang="scss">
:root {
  overflow: hidden;
}

#vodacomwrapper {
  transition: background-image 0.5s ease-in-out;
  background-size: cover; 
  background-position: center center; 
  background-repeat: no-repeat; 
}

#master-scroll-container {
  overflow-x: hidden; 
}

.slide-section {
  width: 100%;
  height: 100vh;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
}

.slide-content-wrapper {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background-size: cover;
  background-position: center center;
}

.bgblur {
  backdrop-filter: blur(10px);
  background-color: rgba(0,0,0,0.1);
}

.loader-container {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background-color: rgba(255, 255, 255, 0.9);
  z-index: 9999;
}

.logo-loader {
  width: 150px;
  animation: pulse 1.5s infinite;
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}

.error-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  text-align: center;
  padding: 20px;
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.retry-button {
  margin-top: 15px;
  padding: 10px 20px;
  background-color: #721c24;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.txtintro {
  width: 100%;
  height: 100%;
}

#slide-1 { 
  background: rgba(0, 0, 0, 0);
}

#slide-2 {
  background: linear-gradient(45deg, #1a75ff, #4da6ff);
}

#slide-3 {
  background: linear-gradient(45deg, #1aff66, #66ff99);
}

#slide-4 {
  background: linear-gradient(45deg, #ffcc00, #ffdd4d);
}

header.fixed-top {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 1000; 
  background-color: transparent; 
  transition: background-color 0.3s ease;
}

header.fixed-top.scrolled {
  background-color: rgba(0, 0, 0, 0.8); 
}

#headerpadding {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 2rem; 
}

#headerpadding img {
  height: 40px; 
}

.menu-container {
  position: relative;
}

.hamburger {
  display: none; 
  flex-direction: column;
  justify-content: space-around;
  width: 30px;
  height: 25px;
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 0;
  z-index: 10;
}

.hamburger span {
  width: 30px;
  height: 3px;
  background: white;
  border-radius: 5px;
  transition: all 0.3s linear;
  position: relative;
  transform-origin: 1px;
}

.hamburger.is-active span:nth-child(1) {
  transform: rotate(45deg);
}

.hamburger.is-active span:nth-child(2) {
  opacity: 0;
  transform: translateX(20px);
}

.hamburger.is-active span:nth-child(3) {
  transform: rotate(-45deg);
}

#menu {
  display: flex;
}

#menu ul {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
}

#menu ul li {
  margin-left: 20px;
  cursor: pointer;
}

#menu ul li .slide-label {
  color: white;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.3s ease;
}

#menu ul li.active .slide-label,
#menu ul li:hover .slide-label {
  color: #e60000; 
}

@media (max-width: 1024px) { 
  .hamburger {
    display: flex;
  }
  #menu {
    position: fixed;
    top: 0;
    left: -100%; 
    width: 70%; 
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.95);
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transition: left 0.5s ease;
    padding-top: 60px; 
  }
  #menu.is-open {
    left: 0;
  }
  #menu ul {
    flex-direction: column;
    text-align: center;
  }
  #menu ul li {
    margin: 20px 0;
  }
}

.back-to-top {
  position: fixed;
  bottom: 20px;
  right: 20px;
  background-color: rgba(230, 0, 0, 0.7); 
  color: white;
  border: none;
  border-radius: 50%;
  width: 50px;
  height: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s, visibility 0.3s, background-color 0.3s;
  z-index: 999;
}

.back-to-top:hover {
  background-color: rgba(204, 0, 0, 0.9); 
}

.back-to-top.show {
  opacity: 1;
  visibility: visible;
}

.back-to-top img {
  width: 25px;
  height: auto;
}

</style>