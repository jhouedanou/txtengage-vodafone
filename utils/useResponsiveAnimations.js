import { ref, computed, onUnmounted } from 'vue';
import { useTabletDetection } from './useTabletDetection.js';
import { useFullpageScrollTrigger } from './useFullpageScrollTrigger.js';
import useMobileAnimations from './mobileAnimations.js';

// Syst√®me de commutation intelligent entre animations desktop/mobile/tablette
export function useResponsiveAnimations() {
  // Initialisation des syst√®mes
  const tabletDetection = useTabletDetection();
  const desktopAnimations = useFullpageScrollTrigger();
  const mobileAnimations = useMobileAnimations();
  
  // √âtats globaux
  const isInitialized = ref(false);
  const currentAnimationSystem = ref(null);
  const sections = ref([]);
  
  // Computed properties
  const isMobile = computed(() => {
    return !tabletDetection.shouldUseDesktopMode();
  });
  
  const isTablet = computed(() => {
    return tabletDetection.isTablet.value;
  });
  
  const shouldUseDesktopAnimations = computed(() => {
    return tabletDetection.shouldUseDesktopMode();
  });

  /**
   * Initialisation du syst√®me responsif
   */
  const initResponsiveAnimations = (sectionsElements, options = {}) => {
    if (isInitialized.value) {
      console.warn('‚ö†Ô∏è Syst√®me responsif d√©j√† initialis√©');
      return;
    }

    console.log('üöÄ Initialisation du syst√®me d\'animations responsif');
    
    // Validation des sections
    if (!Array.isArray(sectionsElements) || sectionsElements.length === 0) {
      console.error('‚ùå Erreur: sections manquantes ou invalides');
      return;
    }

    sections.value = sectionsElements;

    // Initialiser la d√©tection de tablettes
    tabletDetection.init();

    // D√©terminer et initialiser le syst√®me d'animations appropri√©
    if (shouldUseDesktopAnimations.value) {
      console.log('üñ•Ô∏è Initialisation du syst√®me desktop/tablette');
      currentAnimationSystem.value = 'desktop';
      
      // Initialiser le syst√®me desktop avec toutes les sections
      desktopAnimations.init(sectionsElements);
      
      // Configuration sp√©ciale pour les tablettes
      if (isTablet.value) {
        setupTabletSpecificBehavior();
      }
    } else {
      console.log('üì± Initialisation du syst√®me mobile');
      currentAnimationSystem.value = 'mobile';
      
      // Pour mobile, on utilise le scroll natif avec des adaptations l√©g√®res
      setupMobileBehavior();
    }

    isInitialized.value = true;
    console.log(`‚úÖ Syst√®me responsif initialis√© (${currentAnimationSystem.value})`);
  };

  /**
   * Configuration sp√©cifique pour les tablettes
   */
  const setupTabletSpecificBehavior = () => {
    console.log('üì± Configuration du comportement sp√©cifique aux tablettes');
    
    // √âcouter les √©v√©nements de swipe convertis en √©v√©nements clavier
    const handleTabletKeyboardEvent = (e) => {
      // V√©rifier si l'√©v√©nement vient d'un swipe tablette
      if (e.detail && e.detail.source === 'tablet-swipe') {
        console.log(`üì± √âv√©nement clavier provenant d'un swipe tablette: ${e.key}`);
        
        // Ajouter une logique sp√©cifique si n√©cessaire
        // Par exemple, des animations diff√©rentes pour les tablettes
      }
    };

    document.addEventListener('keydown', handleTabletKeyboardEvent);

    // D√©sactiver le scroll natif pour √©viter les conflits
    document.body.style.overflow = 'hidden';
    document.documentElement.style.overflow = 'hidden';

    console.log('‚úÖ Comportement tablette configur√©');
  };

  /**
   * Configuration pour mobile
   */
  const setupMobileBehavior = () => {
    console.log('üì± Configuration du comportement mobile avec animations compl√®tes');
    
    // R√©activer le scroll natif pour le conteneur principal
    document.body.style.overflow = '';
    document.documentElement.style.overflow = '';

    // IMPORTANT: Initialiser les vraies animations mobiles avec toutes les fonctionnalit√©s
    if (sections.value && sections.value.length > 0) {
      console.log('üöÄ Initialisation des animations mobiles avanc√©es');
      mobileAnimations.initMobileAnimations(sections.value);
    } else {
      console.warn('‚ö†Ô∏è Pas de sections disponibles pour les animations mobiles');
    }
  };

  /**
   * Navigation vers une section
   */
  const goToSection = (index, duration = null) => {
    if (!isInitialized.value) {
      console.warn('‚ö†Ô∏è Syst√®me non initialis√©');
      return;
    }

    if (index < 0 || index >= sections.value.length) {
      console.warn(`‚ö†Ô∏è Index de section invalide: ${index}`);
      return;
    }

    console.log(`üéØ Navigation vers la section ${index} (syst√®me: ${currentAnimationSystem.value})`);

    if (currentAnimationSystem.value === 'desktop') {
      // Utiliser le syst√®me desktop/tablette
      desktopAnimations.goToSection(index, duration);
    } else {
      // CORRECTION: Utiliser le syst√®me d'animations mobiles complet
      console.log(`üì± Navigation mobile vers section ${index} avec animations`);
      mobileAnimations.goToMobileSection(index, duration || 0.8);
    }
  };

  /**
   * Obtenir l'index de la section actuelle
   */
  const getCurrentSectionIndex = () => {
    if (!isInitialized.value) return 0;
    
    if (currentAnimationSystem.value === 'desktop') {
      return desktopAnimations.currentSectionIndex.value;
    } else {
      // CORRECTION: Utiliser l'index du syst√®me d'animations mobiles
      return mobileAnimations.currentSectionIndex.value;
    }
  };

  /**
   * V√©rifier si on navigue actuellement
   */
  const isNavigating = computed(() => {
    if (currentAnimationSystem.value === 'desktop') {
      return desktopAnimations.isNavigating.value || tabletDetection.isProcessingSwipe.value;
    } else {
      // CORRECTION: Utiliser l'√©tat de navigation du syst√®me mobile
      return mobileAnimations.isNavigating.value;
    }
  });

  /**
   * Obtenir les √©tats d'animation
   */
  const getAnimationStates = () => {
    if (currentAnimationSystem.value === 'desktop') {
      return desktopAnimations.animationStates.value;
    } else {
      // CORRECTION: Utiliser les √©tats d'animation du syst√®me mobile
      return mobileAnimations.animationStates.value;
    }
  };

  /**
   * Basculer entre les syst√®mes d'animations
   */
  const switchAnimationSystem = (forceSystem = null) => {
    if (!isInitialized.value) return;

    const newSystem = forceSystem || (shouldUseDesktopAnimations.value ? 'desktop' : 'mobile');
    
    if (newSystem === currentAnimationSystem.value) {
      console.log(`‚ÑπÔ∏è Syst√®me d√©j√† en mode ${newSystem}`);
      return;
    }

    console.log(`üîÑ Basculement du syst√®me: ${currentAnimationSystem.value} ‚Üí ${newSystem}`);

    // Nettoyer l'ancien syst√®me
    cleanup();

    // Initialiser le nouveau syst√®me
    currentAnimationSystem.value = newSystem;
    
    if (newSystem === 'desktop') {
      desktopAnimations.init(sections.value);
      if (isTablet.value) {
        setupTabletSpecificBehavior();
      }
    } else {
      // CORRECTION: Initialiser le syst√®me mobile complet
      setupMobileBehavior();
    }

    console.log(`‚úÖ Basculement termin√© vers ${newSystem}`);
  };

  /**
   * Gestion du redimensionnement
   */
  const handleResize = () => {
    // Re-d√©tecter le type d'appareil
    const wasTablet = tabletDetection.isTablet.value;
    tabletDetection.init();
    
    // Si le type d'appareil a chang√©, basculer le syst√®me
    if (wasTablet !== tabletDetection.isTablet.value) {
      console.log('üîÑ Changement de type d\'appareil d√©tect√©');
      switchAnimationSystem();
    }
  };

  /**
   * Nettoyage
   */
  const cleanup = () => {
    if (currentAnimationSystem.value === 'desktop') {
      desktopAnimations.cleanup();
    } else if (currentAnimationSystem.value === 'mobile') {
      // CORRECTION: Nettoyer aussi les animations mobiles
      mobileAnimations.cleanupMobileAnimations();
    }
    
    tabletDetection.cleanup();
    
    // Restaurer le scroll natif
    document.body.style.overflow = '';
    document.documentElement.style.overflow = '';
    
    isInitialized.value = false;
    currentAnimationSystem.value = null;
    sections.value = [];
    
    console.log('üßπ Nettoyage du syst√®me responsif termin√©');
  };

  /**
   * Fonctions de debug sp√©cifiques au syst√®me responsif
   */
  const debugInfo = () => {
    return {
      isInitialized: isInitialized.value,
      currentAnimationSystem: currentAnimationSystem.value,
      isMobile: isMobile.value,
      isTablet: isTablet.value,
      shouldUseDesktopAnimations: shouldUseDesktopAnimations.value,
      sectionsCount: sections.value.length,
      currentSectionIndex: getCurrentSectionIndex(),
      isNavigating: isNavigating.value,
      animationStates: getAnimationStates(),
      tabletDetection: tabletDetection.debugInfo(),
      desktopAnimations: currentAnimationSystem.value === 'desktop' ? {
        currentSectionIndex: desktopAnimations.currentSectionIndex.value,
        isNavigating: desktopAnimations.isNavigating.value,
        animationStates: desktopAnimations.animationStates.value
      } : null
    };
  };

  // Exposer les fonctions de debug globalement
  if (typeof window !== 'undefined') {
    window.debugResponsiveAnimations = {
      info: debugInfo,
      switchToDesktop: () => switchAnimationSystem('desktop'),
      switchToMobile: () => switchAnimationSystem('mobile'),
      getCurrentSection: getCurrentSectionIndex,
      goToSection,
      forceTabletMode: () => {
        tabletDetection.forceTabletMode();
        switchAnimationSystem('desktop');
      },
      cleanup,
      // Proxy vers les fonctions de debug des sous-syst√®mes
      tablet: window.debugTabletDetection,
      desktop: window.debugDesktopAnimations
    };
  }

  // √âcouter les changements de taille d'√©cran
  if (typeof window !== 'undefined') {
    window.addEventListener('resize', handleResize);
    window.addEventListener('orientationchange', handleResize);
  }

  // Cleanup automatique au unmount
  onUnmounted(() => {
    cleanup();
    // Nettoyer aussi les event listeners
    if (typeof window !== 'undefined') {
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('orientationchange', handleResize);
    }
  });

  // API publique
  return {
    // √âtats
    isMobile,
    isTablet,
    isInitialized,
    currentAnimationSystem,
    isNavigating,

    // Fonctions principales
    initResponsiveAnimations,
    goToSection,
    getCurrentSectionIndex,
    getAnimationStates,

    // Fonctions de contr√¥le
    switchAnimationSystem,
    handleResize,
    cleanup,
    debugInfo
  };
}

export default useResponsiveAnimations;